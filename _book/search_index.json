[["index.html", "R Reference Manual Introduction References &amp; Resources", " R Reference Manual Introduction A quick-reference guide to help me find what isn’t easily found by an internet search. In R for Data Science, Garrett Grolemund and Hadley Wickham outline the tools needed to tackle about 80% of the tasks required in a typical data science project (“Introduction”). Those concepts, which I’ve used as an organizing guide for this manual, are: References &amp; Resources The R Project for Statistical Computing Library of R Packages Getting Help with R The R Manuals Frequently Asked Questions Books Related to R Documentation RStudio RStudio Cheat Sheets Webinars and Videos On Demand Online learning RStudio Blog Online Manuals R for Data Science Advanced R R Packages The R Inferno The tidyverse style guide Efficient R Programming Free R Reading Material *Tidy Modeling with R What They Forgot to Teach You About R Other Online Resources DataCamp RDocumentation R Bloggers “Tutorials for learning R” Regular Expressions 101 "],["import-or-create-data.html", "Import or Create Data Create Data Local Drive Internet Database Notes &amp; References", " Import or Create Data Create Data {base} array() c() See base::vector(). data.frame() dir.create() factor() list() matrix() seq() vector() Preferable to base::c() when creating an empty vector (“Five Tips to Improve Your R Code”). {tibble} add_row() tibble() tribble() Local Drive {base} attach() Allows objects in the database to be accessed by giving their names (e.g., height rather than women$height). file.choose() file.size() load() Reload datasets saved with base::save(). readRDS() Restore an R object written with base::saveRDS(). {data.table} fread() Similar to utils::read.table(), but faster and more convenient for large data sets. {foreign} read.spss() {haven} read_sas() {readr} read_csv() read_csv2() read_delim() Remove imported attributes using %&gt;% .[], attr(df, \"spec\") &lt;- NULL, or %&gt;% data.frame(). read_tsv() {readxl} excel_sheets() read_excel() read_xls() read_xlsx() {utils} data() Load specified data sets, or list the available data sets. Use this function to load the data sets that accompany R packages, such as openintro::hsb2, openintro::email50,and gapminder::gapminder. read.csv() read.csv2() read.delim() read.delim2() read.table() {XLConnect} readWorksheetFromFile() Internet {httr} GET() Get a URL. {jsonlite} read_json() {readr} read_csv() read_csv2() read_delim() read_tsv() {rjson} fromJSON() Convert JSON to R. {utils} download.file() See example below. unzip() See example below. Examples utils::download.file(): download.file( &quot;https://assets.datacamp.com/production/repositories/5028/datasets/a55843f83746968c7f118d82ed727db9c71e891f/snake_river_visits.rds&quot;, destfile = paste0(getwd(), &quot;/Snake River Visits.rds&quot;) ) # Option 1: snake_river_visits &lt;- readRDS(file.choose()) # Option 2: snake_river_path &lt;- paste0(getwd(), &quot;/Snake River Visits.rds&quot;) snake_river_visits &lt;- readRDS(snake_river_path) utils::download.file() for .Rdata files: # Example 1: download.file( &quot;https://assets.datacamp.com/production/repositories/236/datasets/7f714f993f1ad4c3d26412ae1e537ce6355b1b54/iris.RData&quot;, destfile = &quot;datacamp_iris_dataset.Rdata&quot; ) load(&quot;datacamp_iris_dataset.Rdata&quot;) # Example 2: download.file( &quot;https://assets.datacamp.com/production/repositories/235/datasets/3b6fc2923b599058584b57d8c605c6bef454d273/CHIS2009_reduced_2.Rdata&quot;, destfile = &quot;chis_2009.Rdata&quot;, # The documentation for `download.file` indicates that the function will # automatically include `mode = &quot;wb&quot;` for .Rdata files. That may have happened # in Example 1, but didn&#39;t happen in Example 2, which is why I&#39;ve included it. mode = &quot;wb&quot; ) load(&quot;chis_2009.Rdata&quot;) utils::unzip(): download.file( &quot;https://assets.datacamp.com/production/repositories/1069/datasets/578834f5908e3b2fa575429a287586d1eaeb2e54/countries2.zip&quot;, destfile = &quot;Data Sets/Countries&quot;, mode = &quot;wb&quot; ) unzip(&quot;Data Sets/Countries&quot;, exdir = &quot;Data Sets&quot;) Database {DBI}: R Database Interface dbListTables(): Specify schema with dbListTables(conn, schema = \"schema_name\"). Id(): See example below. SQL(): See example below. {dbplyr}: A ‘dplyr’ Back End for Databases {odbc}: Connect to ODBC Compatible Databases dbConnect() See example below for specifying a database. See example below for troubleshooting hang-ups. Examples DBI::Id() vs DBI::SQL(): The following are comparable methods of accessing &lt;database&gt;.&lt;schema_name&gt;.&lt;table_name&gt;: dbCreateTable( conn, name = Id(catalog = &quot;database_name&quot;, schema = &quot;schema_name&quot;, table = &quot;table_name&quot;), fields = sample_data_frame ) dbCreateTable( conn, name = SQL(&quot;database_name.schema_name.table_name&quot;), fields = sample_data_frame ) odbc::dbConnect(): # Specify database: conn_1 &lt;- dbConnect(odbc::odbc(), dsn = &quot;sql&quot;) # Default database: Actuary conn_2 &lt;- dbConnect(odbc::odbc(), dsn = &quot;sql&quot;, Database = &quot;Staging&quot;) # Troubleshoot hang-ups # It appears that RStudio&#39;s attempt to load information into the Connection Pane, # via `odbc::dbConnect`, can sometimes cause the call to hang, indefinitely. # Use the following code to access the database in such a situation: options(connectionObserver = FALSE) References Databases using R Using SQL in RStudio SQL and R Tips and Troubleshooting Hints Temp Tables Use SET NOCOUNT ON in the SQL query to prevent R confusing the SQL rowcount return value with the temporary table. Try case-sensitive syntax (e.g., when querying a database other than the default). Try selecting specific columns, rather than SELECT *, as SQL BLOB columns cause trouble. Error Messages Error in env[[name]] &lt;- x : attempt to use zero-length variable name Problem code: select max(date) from table Solution: select max(date) as max_date from table Error: “Object does not exist or you do not have permission to create/delete it” in combination with having db_owner rights to the database. Problem code: CREATE OR ALTER PROCEDURE &lt;non_default_schema&gt;.&lt;procedure_name&gt; Solution: The default database in the ODBC is not set to the database you wish to modify. You can recreate the error in SSMS by using the same code (e.g. set the database in the dropdown menu to master and run the script, which outputs the same error). Update the ODBC connection to specify the correct database. Parameterized Queries Reference: “Databases Using R” See example below. Optimization: WHERE EXISTS and WHERE NOT EXISTS are generally more efficient than = and &lt;&gt;. = is generally more efficient than &lt;&gt;. Examples Parameterized query: param_query &lt;- dbSendQuery(con, &quot;select * from table where column = ?&quot;) dbBind(param_query, input) dbFetch(param_query) # As a function: query_data &lt;- function(input) { dbBind(param_query, input) dbFetch(param_query) } map(as.list(df$input_column), query_data) %&gt;% bind_rows() SQL References “10 Easy Steps to a Complete Understanding of SQL” “Query Planning” “Using SQL in RStudio by Irene Steves Notes &amp; References “Data structures” (Wickham, Advanced R) {openintro} contains data sets useful for practicing and teaching. “Vectors” (Grolemund &amp; Wickham, R for Data Science) "],["tidy.html", "Tidy Explore Raw Data Tidy Data Prepare Data for Analysis", " Tidy “Tidying your data means storing it in a consistent form that matches the semantics of the dataset with the way it is stored. In brief, when your data is tidy, each column is a variable and each row is an observation. Tidying data is important because the consistent structure lets you focus your struggle on questions about the data, not fighting to get the data into the right form for different functions.” - Garrett Grolemund &amp; Hadley Wickham, R for Data Science Explore Raw Data {base} attr() attr(x, \"names\") is the same as base::names(x). Use attr(x, \"names\") &lt;- value to set attribute values. attribute() class() colnames() dim() dimnames() format() length() levels() Levels default to alphabetical order, so be careful when renaming them (i.e., don’t accidentally set the “F” level equal to “Male” rather than “Female”). mode() names() nchar() order() rownames() summary() typeof() {graphics} hist() plot() {skimr} skim() Similar to tibble::glimpse() and utils::str(). {tibble} glimpse() Similar to skimr::skim() and utils::str(). {utils} head() str() Similar to skimr::skim() and tibble::glimpse(). tail() Tidy Data {base} droplevels() Drop unused levels from factors. This function will keep levels that have even 1 or 2 counts. If you want to remove levels with low counts from a data set in order to simplify your analysis, first filter out those rows and then use droplevels(). duplicated() See also data.table::duplicated(). unique() See also data.table::unique(). {data.table} anyDuplicated() duplicated() See also base::duplicated(). unique() See also base::unique(). {dplyr}: A Grammar of Data Manipulation na_if(): See also tidyr::replace_na(). {janitor} clean_names() get_dupes() Prefer over base::duplicated() and data.table::duplicated(). remove_empty() {naniar} replace_with_na(): Compliment to tidyr::replace_na(); consider also stringr::str_replace(replacement = NA_character_). {purrr} transpose() Turn a list-of-lists inside-out. {reshape2} (superseded by {tidyr}) cast() See tidyr::pivot_wider() melt() See tidyr::pivot_longer() {splitstackshape} cSplit() See also tidyr::separate() {tibble} rowid_to_column() Add a column of sequential row IDs. Useful when a separate ID is required to manipulate rows or columns, such as when using tidyr::pivot_longe()r rownames_to_column() {tidyr}: Tidy Messy Data fill(): See zoo::na.fill() and zoo::na.locf(). nest(): Nest repeated values in a list-variable. Helpful when separating a data frame in preparation to model the data for each grouping. replace_na(): See dplyr::na_if(). {zoo}: S3 Infrastructure for Regular and Irregular Time Series (Z’s Ordered Observations) na.fill() and na.locf(): See tidyr::fill(). Prepare Data for Analysis Coerce {base} as.array() as.data.frame() See alsotibble::as_tibble(). as.Date() as.factor() as.list() as.matrix() as.POSIX-() factor() Rearrange the order of factors by using the levels argument. For example, rearrange the order of “Bad,”Good,” and “Neutral” using `levels = c(“Bad”, “Neutral”, “Good”). is.na() Use is.na &lt;- to set elements to NA. unclass() {methods} as() {tibble} as_tibble() Preferable to base::as.data.frame(). enframe() Preferable to using tibble::as_tibble() to coerce a vector to a data frame. Dates and Datetimes {anytime} anytime(): Parse POSIXct or Date objects from input data. {base} as.Date() OlsonNames() Displays available time zones. as.POSIXct.*() as.POSIXlt.*() strptime() Date-time conversion to and from character. Sys.timezone() See also base::OlsonNames(). {fasttime} fastPOSIXct() Convert strings into POSIXct object (string must be in year, month, day, hour, minute, second format.) {hms} as.hms() hms() Store time-of-day values as hms class. is.hms() {lubridate} as_date() fast_strptime() Fast C parser of numeric formats only that accepts explicit format arguments (just as base::strptime()). Note that the format argument must match the input exactly, including any non-white space characters (such as “T” and “Z”). make_date() Create dates from numeric representations. make_datetime() Create date-times from numeric representations. parse_date_time() This function can be slow, because it is designed to be forgiving and flexible. If the dates you are working with are in a consistent format (ideally ISO 8601), use one of the following: fasttime::fastPOSIXct() or lubridate::parse_date_time2(). parse_date_time2() Fast C parser of numeric orders. ymd(): Parse dates with year, month, and day components. Related formats: ydm(), mdy(), myd(), dmy(), dym(), yq(). ymd_hms(): Parse date-times with year, month, day, hour, minute, and second components. Related formats: ymd_hm(), ymd_h(), dmy_hms(), dmy_hm(), dmy_h(), mdy_hms(), mdy_hm(), mdy_h(), ydm_hms(), ydm_hm(), ydm_h(). Filter {dplyr} filter() {purrr} keep() {stats} na.omit() Strings {base} agrep() cat() Concatenate and print. chartr() Change certain characters. gregexpr() grep() grepl() gsub() regexec() regexpr() sub() tolower() See also stringr::str_to_lower(). toupper(): Convert to uppercase. See also stringr::str_to_upper(). {fuzzyjoin} stringdist_join() stringdist_anti_join() stringdist_full_join() stringdist_inner_join() stringdist_left_join() stringdist_right_join() stringdist_semi_join() {fuzzywuzzyR} FuzzMatcher() {qdap} check_spelling() {qdapDictionaries} DICTIONARY() Nettalk Corpus syllable data set. GradyAugmented() Augmented list of Grady Ward’s English Words and Mark Kantrowitz’s Names List. Mark Kantrowitz’s Names list is available in full here. {stringr} str_detect Control the pattern argument options with regex() (e.g., str_detect(x, regex(pattern, ignore_case = TRUE)). str_remove() str_to_lower() str_to_title() str_trim() str_to_upper() str_wrap() Use with ggplot2::facet_wrap() to wrap long panel titles. Test {assertive} {base} all() any() Use any(is.na(data.frame)) to determine if there are any NA values in a data frame. anyNA() Possibly faster implementation of base::any(is.na(x)). exists() is.array() is.data.frame() is.matrix() is.vector() setequal() Check two vectors for equality. sum() Test whether all elements of a vector do or do not meet a certain condition, use as follows: sum(email$num_char &lt; 0). {purrr} every() {stats} complete.cases() Find complete cases (i.e., rows without NA values). {tibble} is_tibble() "],["transform.html", "Transform Summary Statistics Create New Variables or Modify Existing Ones Dates and Datetimes Factors Merge or Append Data Narrow in on Observations of Interest Test", " Transform “Transformation includes narrowing in on observations of interest (like all people in one city, or all data from the last year), creating new variables that are functions of existing variables (like computing velocity from speed and time), and calculating a set of summary statistics (like counts or means).” - Garrett Grolemund &amp; Hadley Wickham, R for Data Science Summary Statistics {base} mean() Use base::mean(variable == value) to calculate proportion; see example below. This trick works because mean() treats TRUE as 1 and FALSE as 0. table() Use to view the mode of a data set. range() Use diff(range()) to get the range as a measure of variability. {dplyr} {stats} quantile() Useful in calculating confidence intervals (from bootstrapped data); see example below. Examples base::mean() by_country &lt;- votes %&gt;% group_by(country) %&gt;% summarize( total = n(), percent_yes = mean(vote == 1)) base::quantile() # 95% confidence interval: df %&gt;% summarize( lower = quantile(column_name, 0.025), upper = quantile(column_name, 0.975) ) Create New Variables or Modify Existing Ones {dummies} dummy.data.frame() Useful when needing to calculate the Jaccard index for categorical data. countrycode countrycode(): Convert country codes into country names. dplyr recode(): Recode values (the numeric alternative to using if_else or case_when()). Example: dplyr::mutate df &lt;- df %&gt;% mutate(var_name = str_to_lower(var_name)) # Add a T/F vector, which can then be referenced to highlight certain # information in a plot: df &lt;- df %&gt;% mutate(hilight = attributed_provider_id = 95597) Dates and Datetimes base::date Get the current system date and time. base::difftime Time intervals and differences. base::difftime is the function behind the - operator when used with dates and datetimes (e.g., time_1 - time_2 is equivalent to difftime(time_1, time_2)). The advantage of using difftime over -, however, is the units argument because it allows you to specify the unit of time in which the difference is calculated. base::months Extract the month names. base::quarters Extract the calendar quarters. base::seq.Date base::Sys.Date Get the current date in the current time zone. base::Sys.time Get the absolute date-time value (which can be converted to various time zones and may return different days). base::weekdays Extract weekday names. lubridate::ceiling_date lubridate::date Get or set the date component of a date-time. lubridate::day Get or set the day component of a datetime. lubridate::floor_date lubridate::month Get or set the month component of a datetime. lubridate::now The current time (as a POSIXct object). lubridate::quarter Get or set the fiscal quarter or semester component of a datetime. lubridate::round_date Time spans: Duration Use when you are interested in seconds elapsed. lubridate::ddays lubridate::dhours lubridate::dminutes lubridate::dseconds lubridate::dweeks lubridate::dyears Time spans: Interval Use when you have a start and end. %--% int_aligns int_diff int_end int_flip int_length int_overlaps int_shift int_standardize int_start interval is.interval Time spans: Period Use when you are interested in human units. lubridate::day lubridate::hour lubridate::minute lubridate::month lubridate::second lubridate::week lubridate::year Time zones: lubridate::force_tz Change the time zone without changing the clock time. lubridate::tz Extract the time zone from a datetime. lubridate::with_tz View the same instant in a different time zone. lubridate::today lubridate::%m+% &amp; %m-% Add and subtract months to a date without exceeding the last day of the new month. lubridate::%within% Test whether a date or interval falls within an interval. lubridate::year Get or set the year component of a datetime. Factors forcats fct_drop(): Drop levels. fct_reorder(): Reorder levels, based on the value of another variable. fct_rev(): Reverse levels. stats reorder(): Reorder levels of a factor. Useful within the aes() argument in a ggplot() call. Merge or Append Data base append(): Add elements to a vector. cbind(): Combine objects by column. intersect(): Combine data shared in common between two datasets. Similar to dplyr::semi_join(). merge(): Merge two data frames. dplyr::join functions are an alternative to merge(). rbind(): Combine objects by row. setdiff(): Find the difference between two vectors. Similar to dplyr::anti_join(). union(): Combine two datasets without duplicating values. dplyr bind(): Bind multiple data frames by row and column. Child functions: bind_rows(), bind_cols(), combine(). Join Functions: Join two tables. Filtering Joins: anti_join(): Return all rows from x where there are not matching values in y, keeping just columns from x. semi_join(): Return all rows from x where there are matching values in y, keeping just columns from x. A semi join differs from an inner join because an inner join will return one row of x for each matching row of y, where a semi join will never duplicate rows of x. Mutating Joins: full_join(): Return all rows and all columns from both x and y. Where there are not matching values, returns NA for the one missing. inner_join(): Return all rows from x where there are matching values in y, and all columns from x and y. If there are multiple matches between x and y, all combination of the matches are returned. left_join(): Return all rows from x, and all columns from x and y. Rows in x with no match in y will have NA values in the new columns. If there are multiple matches between x and y, all combinations of the matches are returned. right_join(): Return all rows from y, and all columns from x and y. Rows in x with no match in y will have NA values in the new columns. If there are multiple matches between y and x, all combinations of the matches are returned. tibble add_column(): Add columns to a data frame. add_row(): Add rows to a data frame. Narrow in on Observations of Interest {base} order() See also: dplyr::arrange(). prop.table() Express table entries as proportions of the marginal table (thus, as the values are proportions of the whole, sum(prop.table(table_name)) = 1.) The input is a table produced by base::table(). Specify conditional proportions on rows or columns by using the margin argument. table(): Build a table of the counts at each combination of factor levels. Use base::prop.table() to see the table entries expressed as proportions. {dplyr}: A Grammar of Data Manipulation arrange() distinct() filter() When using multiple | conditions, use %in% to save space; see example below. rename() sample_n() select() Use ?dplyr::select_helpers to see the available helper functions. slice() slice_min(), slice_max() transmute() A combination of dplyr::select() and dplyr::mutate(). Examples dplyr::filter() ilo_data %&gt;% filter(country %in% c(&quot;Sweden&quot;, &quot;Switzerland&quot;)) ilo_data %&gt;% filter(country == &quot;Sweden&quot; | country == &quot;Switzerland&quot;) Test {dplyr} all_equal() Compare data frames. near() Compare two numeric vectors (safer than using ==). {base} Operators: Comparison Operators (&lt;, &gt;, &lt;=, &gt;=, ==, !=) Use identical() and all.equal() rather than == and != in tests where a single TRUE or FALSE is required (such as if expressions). identical() See also dplyr::all_equal(), dplyr::near(). match() %in% is the more intuitive binary operator. setequal() Check two vectors for equality. See also dplyr::near(). which() This function is often unnecessary, according to “Five Tips to Improve Your R Code”. which.max() Use also to identify the first TRUE/FALSE. which.min() Use also to identify the first TRUE/FALSE. {dplyr} all_equal() Compare data frames. near() See also base::identical(). "],["visualize.html", "Visualize Interfaces Graphs, Charts, and Plots Maps", " Visualize “Visualisation is a fundamentally human activity. A good visualisation will show you things that you did not expect, or raise new questions about the data. A good visualisation might also hint that you’re asking the wrong question, or you need to collect different data. Visualisations can surprise you, but don’t scale particularly well because they require a human to interpret them.” - Garrett Grolemund &amp; Hadley Wickham, R for Data Science References: **A ggplot2 Tutorial for Beautiful Plotting in R Interfaces shiny Graphs, Charts, and Plots {base} abline() plot() points() {diagram} {DiagrammeR} grViz() {GGally} ggally_box() ggpairs() Scatter plot matrix (SPLOM); includes correlation coefficients. See base::plot(). ggparcoord() Parallel coordinate plots. {ggbeeswarm} {ggforce} {ggplot2} Layers Coordinates Layer Unlike scale layer functions, coordinates layer functions do not truncate data. Coordinates layer functions are calculated after statistics layer functions, which means a trend line may not make sense (e.g., using geom_smooth() on data that is subsequently transformed into log10 coordinates using coord_trans()). Each plot accepts only one coordinates layer function. Scale Layer Setting x and y limits with scale layer functions, such as scale_x_continuous(), that depend on ggplot2::lims(), removes data that falls outside those limits and may therefore affect how people perceive the data. Consider using coord_cartesian() instead, which retains all data and uses x and y limits to zoom in. aes() Arguments include color, fill, size, labels, alpha, shape (1-20 accept color attributes and 21-25 accept color and fill attributes), linewidth, linetype, and group. Use ?pch to see options for shape and ?points to see options for points. Note that aes can be called within geom_* rather than prior to. The default shape for points does not have a fill attribute, which means that mapping a categorical variable onto fill won’t result in multiple colors. Helper functions to include in the call when needing to modify the data include: stats::reorder(). cut_number() element_*() facet_*() facets argument: For the tilde interface, the variable on the left specifies the rows and the variable on the right specifies the columns. When faceting in only one direction (e.g., only on rows), use . to specify nothing for the unused direction. Wrap long panel names using stringr::str_wrap(): facet_wrap(~str_wrap(var, width = xx)). See ggforce::facet_wrap_paginate(). geom_bar() Create a bar chart, where the height of the bar is proportional to the number of cases in each group. geom_col() Create a bar chart, where the height of the bar represents values in the data. geom_count()/stat_sum() See geom_jitter() and geom_point(). Use ggplot2::scale_size() to adjust point diameters. geom_density() Create a kernal density estimate (a smoothed version of a histogram). Pair with ggplot2::geom_rug() to be transparent about smoothed data. geom_dotplot() Create a histogram out of dots. geom_errorbar() Shortcut for geom_bar(stat = \"identity\"). geom_freqpoly() See ggplot2::geom_histogram(). geom_histogram() Use aes(x, ..density..) to rescale the y-axis from counts to frequency. Use y = stat(density) to rescale the y-axis from counts to a probability estimate. See ggplot2::geom_freqpoly(). geom_jitter() Useful with ggplot2::geom_boxplot(). See geom_count() and geom_point(). geom_path() Connect observations in the order in which they appear. geom_point() See geom_count() and geom_jitter(). geom_smooth()/stat_smooth() For LOESS smoothing, the span argument adjusts the data window used for smoothing (the default values is 0.9). Use a dummy group variable (e.g., aes(group = 1)) or aes(group = \"All\")) to override groups specified in an earlier mapping layer and show the trend for the population. geom_tile() Heat maps. ggplot_build() Access calculated values. ggtitle() group() Used within aes(). Note that group is usually unnecessary when specifying color, shape, fill, or linetype within aes, or when using facets. See “Aesthetics: grouping” for more information. labs() Use the color argument to relabel the legend title. mean_cl_boot() mean_cl_normal() mean_sdl() Use with ggplot2::stat_summary() (e.g., stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1))). median_hilow() position_identity() Don’t adjust position. position_dodge() Dodge overlapping objects side-to-side. position_jitter() position_nudge() Nudge points a fixed distance. position_stack() Stack overlapping objects on top of each other, as counts. position_fill() Stack overlapping objects on top of each other, as densities. Special variables: ..prop..: Calculates proportion of values (e.g., stat_sum(aes(size = ..prop..))). stat_function() Compute y values from a function of x values. stat_qq() Perform calculations for a quantile-quantile plot. stat_qq_line() stat_summary() Summarize y values at distinct x values. See ggplot2::mean_*(). theme_*() See example for grid::unit(). See ggthemes package. theme_update() “When you call ‘theme_update’ and assign it to an object (e.g., called old), that object stores the current default theme, and the arguments update the default theme. If you want to restore the previous default theme, you can get it back by using theme_update again.” -DataCamp {ggridges} geom_density_ridges() Create a ridgeline plot. {ggthemes} {graphics} boxplot() hist() par() stripchart() One dimensional scatter plots. Prefer over ggplot2::ggplot() when creating one-dimensional plots. {grDevices} colorRamp() Color interpolation. colorRampPalette() Color interpolation. {grid} unit() Create a unit object, to specify locations and dimensions in a coordinate system. See example below. {plotly} plot_ly() {RColorBrewer} brewer.pal() Make the ColorBrewer color palettes available as R palettes. {stats} biplot() Examples grid::unit() # Increase spacing between facets in a `ggplot` object: plot + theme( panel.spacing.x = unit(2, &quot;cm&quot;), panel.margin = unit(c(1, 2, 1, 1), &quot;cm&quot;)) Maps Reference - Geospatial Health Data - rspatialdata "],["model.html", "Model", " Model “Models are complementary tools to visualisation. Once you have made your questions sufficiently precise, you can use a model to answer them. Models are a fundamentally mathematical or computational tool, so they generally scale well. … But every model makes assumptions, and by its very nature a model cannot question its own assumptions. That means a model cannot fundamentally surprise you. - Garrett Grolemund &amp; Hadley Wickham, R for Data Science” {base} I(): Use when raising a variable to an exponent in order to evaluate the value as a mathematical expression rather than as an interaction variable. mean(): Use in modeling, such as classification trees, to compute the accuracy of predicted values; see example below. plot() When used on linear regression, plot() outputs diagnostic plots. sample() set.seed() summary() {bayesplot} {brms}: Bayesian Regression Models using ‘Stan’ See also {bayesplot}, {tidybayes}. {broom}: Convert Statistical Objects into Tidy Tibbles augment(): Augment data with information from an object. glance(): Construct a single row summary of a model, fit, or other object. tidy(): Turn an object into a tidy tibble. {broom.mixed}: Tidying Methods for Mixed Models {car} {caret}: Classification and Regression Training {class}: Functions for Classification knn() {cluster}: “Finding Groups in Data”: Cluster Analysis Extended pam() Useful for silhouette analysis; similar but not identical to stats::kmeans(). {dplyr}: A Grammar of Data Manipulation sample_n() {gbm}: Generalized Boosted Regression Models {infer}: Tidy Statistical Inference generate() Set type = \"permute\" when paired with hypothesize(null = \"independence\") and type = \"bootstrap\" or type = \"simulate\" when paired with hypothesize(null = \"point\"). {lme4}: Linear Mixed-Effects Models glmer() lmer() See {broom.mixed}, {lmerTest}. Additional reference: GLMM FAQ. {lmerTest}: Tests in Linear Mixed Effects Models {MatchIt}: Nonparametric Preprocessing for Parametric Causal Inference match.data() matchit() {mgcv} gam() Generalized additive models (GAMs) with integrated smoothness estimation. Use plot() on a GAM object to view what the function learned from the data. s() Indicates which of the explanatory variables should be considered non-linearly. Use on continuous variables and avoid using on categorical variables. {mixtools} {naivebayes} naive_bayes() {performance}: Assessment of Regression Models Performance {pROC}: Display and Analyze ROC Curves auc() roc() See {ROCR}. {pscl}: Political Science Computational Laboratory pR2(): Pseudo-R^2. The McFadden value matches the manual pseudo-R^2 calculation: 1 - broom::glance(model_name)$deviance / broom::glance(model_name)$null.deviance. {randomForest} See {ranger}. randomForest() {ranger} See {randomForest}. ranger() {ROCR}: Visualizing the Performance of Scoring Classifiers See {pROC}. {rpart} rpart() {rpart.plot} rpart.plot() {rsample} {sigr} wrapChiSqTest() For Pseudo-R^2: On training data, use wrapChiSqTest(model). For test data, use wrapChiSqTest(prediction_column_name, outcome_column_name, target_value). {stats} See {infer} for easier-to-use hypothesis testing functions. cutree() Pair with stats::hclust(). as.formula() Use to define an object to pass as a formula into a model (e.g., fmla &lt;- as.formula(\"unemployment ~ population\"), lm(fmla, data)) coef() Extract model coefficients. cor() See GGally::ggpairs(). cov() cov2cor() Scale a covariance matrix into a correlation matrix. cutree() Pair with stats::hclust(). df.residual() Get the residual degrees of freedom. dist() Distributions Binomial (dbinom()) Exponential (dexp()) Gamma (dgamma()) Geometric (dgeom()) Log-normal (dlnorm()) Normal (dnorm()) Poisson (dpois()) Uniform (dunif()) glm() For family = Gamma, consider using (link = \"log\") rather than the default. Use expm1() on the coefficients to tranform them into a percentage, which is easier to interpret than a logged coefficient value. hclust() kmeans() lm() Fit linear models. model.matrix() Use to create dummy variables from categorical data. See {vtreat} functions. p.adjust() Adjust p-values for multiple comparisons. pairwise.t.test() prcomp() Principal Component Analysis. predict() Model predictions. For lm class objects, predict new values using predict(model, newdata). For glm class objects, predict new values using predict(model, newdata, type = \"response\") (predict() returns the log-odds of the event, instead of the probability, if type = \"response\" is not included). For GAM, predict() returns a matrix so use as.numeric() to convert the matrix to a vector if adding to a data set (such as for plotting the predictions versus the actual outcomes). Access the y values of the model using predict(model, type = \"terms\"). prop.test() See infer::prop_test(). residuals() Extract model residuals. step() Step-wise regression. t.test() See infer::t_test(). {tidybayes} {tidyr} nest() Nest repeated values in a list-variable. Helpful when separating a data frame in preparation to model the data for each grouping. {vtreat} Compared to stats::model.matrix(), {vtreat} functions allow for handling new categorical variables in the test data not seen in the training data. designTreatmentsZ() kWayCrossValidation() prepare() splitPlan() Use to create a cross-validation plan. {WVPlots} GainCurvePlot() Use to evaluate logistic regression models. {xgboost} xgb.cv() Use xgb.cv()$evaluation_log to find the number of trees that minimizes RMSE (input that number as the nrounds argument in xgboost()). Examples base::mean() # Classification Trees: Compute accuracy of predictions on the test data set: mean(loans_test$outcome == loans_test$prediction) "],["communicate.html", "Communicate Color CSS Dashboards &amp; Flowcharts Export Format Output Graphics Plots RStudio Connect RMarkdown", " Communicate “The last step of data science is communication, an absolutely critical part of any data analysis project. It doesn’t matter how well your models and visualisation have led you to understand the data unless you can also communicate your results to others.” - Garrett Grolemund &amp; Hadley Wickham, R for Data Science Color {colorblindr} colorblindr::scale_color_OkabeIto() Color blind-friendly palette. palette.colors(palette = “Okabo.Ito”) CSS Center Title &lt;style type=&quot;text/css&quot;&gt; h1.title { text-align: center; } &lt;/style&gt; Dashboards &amp; Flowcharts {flexdashboard} Creating flowcharts with {ggplot2}. Export {base} file.path() print() Use the include.rownames = FALSE argument to remove row numbers (or names) from the output. save() saveRDS() See “A better way of saving and loading objects in R” to understand the differences between save() and saveRDS(). sink() {ggplot2} ggsave() {readr} write_csv() write_delim() About twice as fast as utils::write.csv() and never writes row names. write_excel_csv() write_tsv() {utils} write.csv() write.csv2() write.table() Prefer readr::write_delim() to utils::write.table(). {XLConnect} loadWorkbook() Format Output {base} format() {DT} datatable() Use options = list(dom = 't') to remove the search bar. Use options = list(dom = \"t\", lengthchange = FALSE) to remove the search bar and box that allows the user to choose how many rows to see. Use options = list(columnDefs = list(list(className = \"dt-center\", targets = (column_position)))) to center column values (where 0 indicates the first column). formatCurrency() {gt} gt() Alternative to knitr::kable and DT::datatable, styled after ggplot2. {kableExtra} kable_styling() add_footnote() {knitr} Code chunk options: collapse kable() opts_chunk$set() {lubridate} stamp() Format dates and times based on human-friendly templates. {scales} comma() dollar() Graphics {knitr} include_graphics() Embed external images in ‘knitr’ documents. Preferable to the ![alt text or image title](path/to/image) Markdown syntax for embedding an external image, as include_graphics offers more control over the attributes of the image. Plots {cols4all} {ggplot2} element_*() Specify the display of how non-data components of a plot are drawn. labs() Modify axis, legend, and plot labels. Child functions: xlab(), ylab(), ggtitle() theme() Customize the non-data components of a plot (see example below). Use ?theme_classic for a list of predefined themes. Examples ggplot2::theme() ggplot(plot_data_2006) + geom_histogram(aes(x = working_hours)) + labs( x = &quot;Working hours per week&quot;, y = &quot;Number of countries&quot;) + theme( text = element_text(family = &quot;Bookman&quot;, color = &quot;gray25&quot;)) RStudio Connect {rsconnect} writeManifest() RMarkdown See RMarkdown: The Definitive Guide See Mozzila Developer Network for CSS help. "],["program.html", "Program Characters Conditionals &amp; Control Flows Environment and Workspace Evaluation (Standard and Non-standard) Functionals Functions Learn About an Object Loops Optimization Popups Selecting, Subsetting, and Piping Style Guide System Commands Version Control", " Program “Surrounding [the tools for importing, tidying, transforming, visualising, modeling, and communicating data] is programming. Programming is a cross-cutting tool that you use in every part of a project. You don’t need to be an expert programmer to be a data scientist, but learning more about programming pays off because becoming a better programmer allows you to automate common tasks, and solve new problems with greater ease.” - Garrett Grolemund &amp; Hadley Wickham, R for Data Science Characters References: ?Quotes Conditionals &amp; Control Flows {base} Control (access documentation using ?Control) if (cond) expr The key difference between if (cond) expr and ifelse is that if (cond) expr will evaluate only the first element of an object with length &gt; 1. See the documentation for each function and the ateucher’s GitHub example titled “R: if vs ifelse” to learn more. for (var in seq) expr while (cond) expr repeat expr break next identical(): Test objects for exact equality. Use identical() rather than == and != in if and while statements to test for equality. ifelse(): Conditional element selection. dplyr::if_else() is more strict by checking the object type. stop(): Stop execution of the expression and execute an error action. Useful in combination with an if statement when you want to generate helpful error messages. stopifnot(): Ensure the truth of an R expression. Prefer base::stop() to base::stopifnot(). dplyr case_when(): A general vectorized if. if_else(): Vectorized if. Environment and Workspace {base} .libPaths() baseenv() The environment of the {base} package; it’s enclosing environment (“parent environment”) is the empty environment. dir() List the files in a directory. dir.create() Create a file path in the computer’s file system. emptyenv() The empty environment, which is the ancestor of all environments and the only environment without an enclosing environment. environment() The current environment. environmentName() exists() Remember that R will look for an object in parent environments until it reaches the empty environment, so use inherits = FALSE to limit the search to only the current environment. getOption() Set and examine global options. getwd() Get the working directory. globalenv() The environment in which you normally work, it’s enclosing environment is the last package attached with library() or require(). history() Display the previous 25 commands. install.packages() Install packages from repositories or local files. library() Load and attach packages, returning an error if the packages does not exist. list.files() List the files in a directory/folder. loadedNamespaces() Return the loaded name spaces. loadhistory() Recall command history. ls() List objects in the specified environment. list2env() From a list, build or add to an environment. new.env() Create a new environment. options() Set and examine global options. parent.env() Return the enclosing environment of the environment listed as an argument. base::parent.env() returns information that can be unhelpful, so use with base::environmentName(), as follows: parent.env(environment_name) %&gt;% environmentName(). q() Terminate an R session. R.version() Version information. R.version.string() Version information. Same call as R.version$version.string(). require() Load and attach packages, returning FALSE if the package does not exist. rm() Remove objects from a specified environment. savehistory() Save command history (default value is “.Rhistory”). save.image() Save the current workspace. search() Return a list of attached packages and R objects. searchpaths() Return the path to attached packages. setwd() Set the working directory file path. When using Windows, use “/” instead of “\". Sys.getenv() See also Sys.setenv(). Sys.info() Extract system and user information. Example: Sys.info()[c(\"sysname\", \"release\")]. Sys.setenv() See also Sys.setenv(). {gdata} object.size() Report the space allocated for an object. See also utils::object.size(). {here} here() {installr} updateR() Check for the latest R version; downloads and installs new R versions. {pryr} where(): Find where a name is defined. {utils} ls.str(): List objects and their structure. object.size(): Report the space allocated for an object. See also gdata::object.size(). sessionInfo(): Collect information about the current R session. References: “Environments” (Hadley Wickham, Advanced R) Evaluation (Standard and Non-standard) base cat() Concatenate and print. `print() Print the argument to the Console. A shortcut to print() is to place the code you want printed inside parentheses. quote() Return the argument, unevaluated. writeLines() Display quotes and backslashes as they would be read, rather than as R stores them (i.e., see the raw contents of the string, as the print() representation is not the same as the string itself). rlang Quosures enquo(), new_quosure(), quo(). References: “Non-standard evaluation” (Hadley Wickham, Advanced R) “Non-standard evaluation” (Hadley Wickham, lazyeval package vignette) “Programming with dplyr” (dplyr.tidyverse.org) Functionals {base} Apply Functions apply Apply functions over array margins. lapply Apply a function over a list or vector. sapply Apply a function over a list or vector and return a vector or matrix. vapply A safer version of sapply, as it requires the output type to be predetermined. mapply Apply a function to multiple list or vector arguments. rapply Recursively apply a function to a list. replicate() tapply Apply a function over a ragged array. {purrr} map Apply a function to each element of a vector. tidyr::unnest is useful in changing the list-column output of map into rows. map2 Map over multiple inputs simultaneously. map_if Apply a function to elements of that match a condition. possibly Uses a default value whenever an error occurs. quietly Capture side effects in a list with components result, output, messages, and warnings. safely Capture side effects in a list with components result and error. transpose Transpose a list (turn a list-of-lists inside-out). Functions {assertive} assert_*() Check whether the input is * (e..g, assert_is_numeric()) and throw and error if the input does not meet the condition. coerce_to() Coerce the input to a different class, with a warning. is_*() Checks whether the input matches the condition specified by * (e.g., assertive::is_non_positive()). use_first() Use only the first element of a vector. {base} do.call() Execute a function call from a name or a function and a list of arguments to be passed to the function. invisible() Return a (temporarily) invisible copy of an object. match.arg() Argument verification. Useful when matching a character argument specified in the function signature. See example. message() Generate a diagnostic message. Preferable to generating a message using cat. return() Return a value from a function. Useful in if statements where one condition is simple and the other is complex (see section 19.6.1 “Explicit return statements” in Hadley Wickham’s R for Data Science. setNames() Set the names in an object. Useful in function writing; see documentation. stop() Stop execution of the expression and execute an error action. Useful in combination with an if statement when you want to generate helpful error messages. stopifnot() Ensure the truth of an R expression. See section 19.5.2 “Checking values” in Hadley Wickham’s R for Data Science for a discussion of stop() versus stopifnot(). Consider functions from {assertive} as an alternative to stopifnot and stop. unlist() Flatten lists. Useful when using purrr’s map functions, which return objects as type list. {zeallot} %&lt;-% Multiple assignment operator (see example below). Examples base::args() args(prop.test) ## function (x, n, p = NULL, alternative = c(&quot;two.sided&quot;, &quot;less&quot;, ## &quot;greater&quot;), conf.level = 0.95, correct = TRUE) ## NULL # The body of `prop.test` contains the following line of code: # `alternative &lt;- match.arg(alternative), which reassigns it to the selected # character vector. zeallot::%&lt;-%: session &lt;- function() { list( r_version = R.version.string, operating_system = Sys.info()[c(&quot;sysname&quot;, &quot;release&quot;)], loaded_pkgs = loadedNamespaces() ) } c(vrsn, os, pkgs) %&lt;-% session() Learn About an Object ?object_name ??object_name {base} args() attributes() View or assign an objects attributes (e.g., class(), dim(), dimnames(), names(), row.names()). body() Get or set the body of a function. colnames() dim() Retrieve or set the dimnames of an object. dimnames() Retrieve or set the dimension names of an object. formals() Get or set the formal arguments of a function. help() Get the topic documentation. help.search() Search the help system for documentation matching a given character string. vignette() rownames() Loops base::seq(): Sequence generation (this functions makes length() unnecessary). base::seq_along(): In for loops, safer than using base::ncol() or base::nrow(). Optimization microbenchmark::microbenchmark(): Sub-millisecond accurate timing of expression evaluations. - A more accurate replacement of system.time(replicate(1000, expr)). Popups svDialogs::dlg_message(): Display a modal message box (works in Windows, MacOS, and Linux). tcltk::tk_messageBox(): Display a generic message box using Tk (Windows-specific). Selecting, Subsetting, and Piping {base} .$variable_name: See example below. .[[\"variable_name\"]]: See example below. {dplyr} pull() See magrittr::extract(), purrr::pluck(). {magrittr} extract() See dplyr::pull(), purrr::pluck(). Examples base::.$variable_name: ui_summary_table &lt;- aws_vendors %&gt;% filter(str_detect(vendor_name, &quot;UTAH INTERACTIVE&quot;)) %&gt;% .$vendor_id %&gt;% map(query_summary_table) %&gt;% bind_rows() base::.[[\"variable_name\"]]: odbc_aws %&gt;% dbGetQuery( paste(&quot; SELECT id FROM batch WHERE entity_id = &quot;, t_id, &quot; AND status IN (&#39;PROCESSED&#39;, &#39;PROCESSING&#39;)&quot; ) ) %&gt;% .[[&quot;id&quot;]] %&gt;% as.double() References “Indexing lists in #rstats. Inspired by Residence Inn” (Hadley Wickham, Twitter, 14 September 2015) Style Guide “The Tidyverse Style Guide” by Hadley Wickham. General Layout and Ordering (taken from the outdated “Google’s R Style Guide”) Title Author File description (e.g., purpose of program, inputs, outputs) source() and library() statements Function definitions Executed statements. System Commands {base} shell() system() system2() {cli}: Helpers for Developing Command Line Interfaces {sys} exec() exec_r() Version Control base::update.packages() 00LOCK error when updating a package: Use update.packages(ask = FALSE, checkBuilt = TRUE, INSTALL_opts = \"--no-lock\") installr::updateR() Remove old versions from Windows: Control Panel &gt; All Control Panel Items &gt; Programs and Features &gt; uninstall old versions C: &gt; Program Files &gt; R &gt; delete old versions. packrat::snapshot(): Capture and store the packages and versions in use. packrat::restore(): Load the most recent snapshot to the project’s private library. Packrat still seems to be under development. The idea sounds good, but in practice the packrat package has caused lots of problems. Git A successful Git branching model git-scm.com Git and GitHub by Hadley Wickham Happy Git and GitHub for the useR by Jenny Bryan Pro Git by Scott Chacon and Ben Straub Understanding the GitHub flow git branch: List, create, or delete branches. git branch -d &lt;branch_name&gt;: Delete a local branch. See “Delete branch in RStudio pop-up” for help removing branches in RStudio after removing them from Git. Git and R Projects R Projects (.Rproj files) should not be nested. Doing so causes problems with Git when tracking changes to a child .Rproj file. "],["python.html", "Python Import Tidy Transform Visualize Model Communicate Program Reference", " Python Import Base Python import ... as ... Numpy array() Tidy “Tidying your data means storing it in a consistent form that matches the semantics of the dataset with the way it is stored. In brief, when your data is tidy, each column is a variable and each row is an observation. Tidying data is important because the consistent structure lets you focus your struggle on questions about the data, not fighting to get the data into the right form for different functions.” - Garrett Grolemund &amp; Hadley Wickham, R for Data Science Base Python shape type() Numpy Transform “Transformation includes narrowing in on observations of interest (like all people in one city, or all data from the last year), creating new variables that are functions of existing variables (like computing velocity from speed and time), and calculating a set of summary statistics (like counts or means).” - Garrett Grolemund &amp; Hadley Wickham, R for Data Science Visualize Model Communicate Program “Surrounding [the tools for importing, tidying, transforming, visualising, modeling, and communicating data] is programming. Programming is a cross-cutting tool that you use in every part of a project. You don’t need to be an expert programmer to be a data scientist, but learning more about programming pays off because becoming a better programmer allows you to automate common tasks, and solve new problems with greater ease.” - Garrett Grolemund &amp; Hadley Wickham, R for Data Science Base Python help() len() print() type() Reference R to Python: Data Wrangling with dplyr and pandas "],["templates.html", "Templates", " Templates Functions CalcAgeInYears &lt;- function(StartDT, EndDT) { require(lubridate) require(magrittr) interval(StartDT, EndDT) %&gt;% divide_by(years(1)) %&gt;% floor() } # # CalcMonthEndDT &lt;- function(Date) { # require(lubridate) # # # ceiling_date(Date, unit = &quot;months&quot;) - 1 # rollforward(Date) # } ExportPlot &lt;- function(PlotName, Width = 12, Height = 7) { # 12 x 7 works well with Google Slides ggsave(paste0(&quot;Viz-&quot;, PlotName, &quot;.png&quot;), width = Width, height = Height) } GenerateMonths &lt;- function(MinDT, MaxDT, EDWPatientID) { # Generate month values between two dates. Useful for claims data when months # without claims are missing (due to no submitted claims). Note that the data # warehouse has a calendar table. # # Arguments # - MinDT (date) # - MaxDT (date) # - EDWPatientID (char) # # Value # - Tibble. # # Details # - seq.Date() works best with month start dates; it does not perform reliably # when the input dates are month end dates (possibly due to dates having a # non-uniform number of days). # - Requires lubridate package. seq.Date( floor_date(MinDT, unit = &quot;months&quot;), floor_date(MaxDT, unit = &quot;months&quot;), by = &quot;month&quot; ) %&gt;% as_tibble_col(column_name = &quot;MonthStartDT&quot;) %&gt;% mutate( EDWPatientID = EDWPatientID, MonthEndDT = CalcMonthEndDT(MonthStartDT) ) %&gt;% select(EDWPatientID, MonthStartDT, MonthEndDT) } Scripts SQL /******************************************************************************* Ticket: Author: Michael Jensen *******************************************************************************/ /******************************************************************************* Input *******************************************************************************/ declare @MinDT date = &#39;&#39; declare @MaxDT date = dateadd(mm, -1, eomonth(getdate())) /******************************************************************************* Data Wrangling *******************************************************************************/ /******************************************************************************* EDA *******************************************************************************/ /******************************************************************************* Output Export files as &lt;temp_table_name&gt;.csv *******************************************************************************/ R - Data Wrangling # Packages &amp; Data Sources ------------------------------------------------------ library(cli) library(glue) # library(janitor) # library(lubridate) # library(magrittr) library(tidyverse) DataPath &lt;- &quot;~/Downloads/Data-&quot; file.exists(DataPath) || cli_abort(glue( &quot;Data path not found. Place output files from 1Query.sql in {DataPath} and try again.&quot; )) # Functions -------------------------------------------------------------------- ExportPlot &lt;- function(PlotName, Width = 12, Height = 7) { # 12 x 7 works well with Google Slides ggsave(paste0(&quot;Viz-&quot;, PlotName, &quot;.png&quot;), width = Width, height = Height) } # Data Wrangling --------------------------------------------------------------- R - EDA source(&quot;2DataWrangling.R&quot;) # Set ggplot2 theme theme_set( theme_classic() + theme(panel.grid.major = element_line(), panel.grid.minor = element_line()) ) Snippets # TODO: Consider turning into a function. AgeGroupDSC &lt;- tibble( AgeNBR = c(0:110) ) %&gt;% mutate( AgeGroupDSC1 = case_when( AgeNBR %in% c(0:2) ~ &quot;Infant (0-2)&quot;, AgeNBR %in% c(3:6) ~ &quot;Child, Preschool (3, 6)&quot;, AgeNBR %in% c(7:12) ~ &quot;Child (7, 12)&quot;, AgeNBR %in% c(13:17) ~ &quot;Adolescent (13, 17)&quot;, AgeNBR %in% c(18:24) ~ &quot;Young Adult (18, 24)&quot;, AgeNBR %in% c(25:44) ~ &quot;Adult (25, 44)&quot;, AgeNBR %in% c(45:64) ~ &quot;Middle-Aged (45, 64)&quot;, AgeNBR %in% c(65:79) ~ &quot;Aged (65, 79)&quot;, AgeNBR &gt; 79 ~ &quot;Elderly (80+)&quot;, ), AgeGroupDSC2 = case_when( AgeNBR %in% c(0:17) ~ &quot;Child&quot;, AgeNBR %in% c(18:44) ~ &quot;Adult (18-44)&quot;, AgeNBR %in% c(45:64) ~ &quot;Middle-Aged (45-64)&quot;, AgeNBR &gt; 64 ~ &quot;Aged (65+)&quot; ) %&gt;% factor(levels = c( &quot;Child&quot;, &quot;Adult (18-44)&quot;, &quot;Middle-Aged (45-64)&quot;, &quot;Aged (65+)&quot; )) ) "],["references-2.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
